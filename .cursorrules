# Time Tracker Development Rules

## CRITICAL: Always Review Lessons Learned (NEW RULE)
- **BEFORE making ANY changes**, read `docs/lessons_learned.md`
- **ALWAYS** consider patterns and mistakes from previous development
- **IMPLEMENT** established best practices for validation, error handling, and data integrity
- **ADD NEW LESSONS** to the file when discovering issues or implementing fixes
- **USE ESTABLISHED** UI/UX patterns and validation rules from lessons learned
- **FOLLOW** testing checklists and development guidelines in lessons learned

## CRITICAL: Document Management Consistency (NEW RULE)
- **SINGLE SOURCE OF TRUTH**: `docs/lessons_learned.md` is the ONLY lessons learned file
- **BEFORE CREATING** any new documentation file, CHECK if one already exists
- **SEARCH PROJECT** for existing documents before creating duplicates
- **MERGE CONTENT** into existing files rather than creating new ones
- **UPDATE REFERENCES** in .cursorrules and other files when moving/merging docs
- **DOCUMENT LOCATIONS**: Maintain awareness of where all project documents are located

## Vibe Coding Philosophy & Simplicity First (NEW RULE)
- **SIMPLICITY OVER SOPHISTICATION**: Choose the simple, predictable solution over complex auto-magic
- **EXPLICIT USER ACTIONS**: Prefer clear user-triggered actions (buttons) over auto-save complexity
- **FAIL FAST WITH CLEAR FEEDBACK**: When things go wrong, show clear messages and recovery options
- **SINGLE RESPONSIBILITY**: Each function should do one thing well
- **READABLE CODE PATHS**: Code should be easy to follow - prefer explicit over implicit behavior
- **VIBE CODING REALITY**: We're building this collaboratively with AI - optimize for understanding and maintainability
- **WHEN IN DOUBT, SIMPLIFY**: If a feature seems complex to implement or debug, consider a simpler approach
- **TEST THE HAPPY PATH FIRST**: Get basic functionality rock-solid before adding sophistication
- **AVOID PREMATURE OPTIMIZATION**: Don't add complexity until there's a proven need

## Development Workflow & Version Management (CRITICAL NEW RULE)
### Keep version numbers consistent across all files
### During Development (Local Testing)
- **NEVER** increment version numbers during local development/testing
- **TRACK ALL CHANGES** in `docs/development_changelog.md`
- **USE CURRENT VERSION** (5.3.0) for all local testing
- **DOCUMENT** issues being worked on and investigation findings
- **ADD** all modifications to "Current Development Cycle" section

### Ready for Deployment (Version Increment Time)
- **REVIEW** all accumulated changes in development changelog
- **CHOOSE** appropriate version increment (patch/minor/major)
- **UPDATE** `version.json` with new version and ALL accumulated changes
- **UPDATE** `docs/release_notes.md` with comprehensive changelog
- **UPDATE** `docs/lessons_learned.md` if fixing bugs or issues
- **UPDATE** `README.md` with correct version number and version history
- **CLEAR** "Current Development Cycle" and start new section in development changelog
- **RUN** `npm test` to verify version consistency
- **DEPLOY** to staging then production

## Version Synchronization (CRITICAL - v5.3.4)
- **ðŸš¨ SINGLE SOURCE OF TRUTH**: `version.json` is the ONLY place to update version numbers
- **AUTOMATIC SYNCHRONIZATION**: Run `npm run version-sync` to update all version references
- **VERSION FORMAT**: Always use `X.Y.Z` format in `versionNumber` field (e.g., "5.3.4")
- **FULL VERSION**: Include descriptive suffix in `version` field (e.g., "5.3.4 - Version Sync System")
- **FILES UPDATED**: The sync script automatically updates `manifest.json`, `sw.js`, and cache versions
- **VERIFICATION**: Run `npm test` to verify version consistency across all files
- **PREVENTION**: This system prevents inconsistent versions across different files

## Service Worker Cache Management (CRITICAL RULE - v5.3.2)
- **ðŸš¨ AUTOMATIC**: Service worker CACHE_VERSION is now updated automatically by version-sync.js
- **NAMING CONVENTION**: Format `vX.Y.Z-auto-version` is generated automatically
- **VERIFICATION**: Run `npm test` to verify CACHE_VERSION matches version.json
- **CONSOLE LOGS**: Service worker logs now use the ${CACHE_VERSION} variable
- **TESTING REQUIREMENT**: Verify cache invalidation works by checking all files update together
- **DOCUMENTATION**: Always document service worker changes in version.json filesModified
- **PREVENTION**: This rule prevents partial deployments and mixed app states

## Storage Technology Evaluation (NEW RULE)
- **BEFORE adding data-heavy features**: Evaluate localStorage vs IndexedDB
- **USE localStorage WHEN**: Simple key-value storage, < 5MB data, synchronous operations preferred
- **CONSIDER IndexedDB WHEN**: Complex queries needed, large datasets (>5MB), async operations acceptable
- **TRIGGER EVALUATION FOR**: Search/filter features, offline sync, large import/export, historical data analysis
- **DOCUMENT DECISION**: Always document why storage technology was chosen in lessons learned

## Mandatory Documentation Discovery Process (NEW RULE)
- **FIRST**: Check `docs/PROJECT_DOCUMENTS.md` inventory for existing documents
- **BEFORE ANY WORK**: Search entire project for existing documentation on the topic
- **SEARCH COMMANDS**: Use file_search tool to find existing docs before creating new ones
- **SEARCH PATTERNS**: Look for variations like "lesson", "guide", "readme", "doc", "note"
- **CHECK DIRECTORIES**: Always explore docs/ subdirectories thoroughly
- **VERIFY UNIQUENESS**: Confirm no similar document exists before creating new ones
- **UPDATE EXISTING**: Prefer updating existing docs over creating new ones
- **UPDATE INVENTORY**: Add new documents to `docs/PROJECT_DOCUMENTS.md` when created

### Version Format Rules
- **Development**: Keep version.json at current release version (5.2.6)
- **Deployment**: Increment to next version (5.2.7, 5.3.0, 6.0.0)
- **NEVER** update version numbers in JavaScript files - use version.json only
- Version format: "X.Y.Z - Brief Description"
- Include comprehensive features list from development changelog
- Update timestamp in ISO format

## Netlify Deployment (CRITICAL)
- **Staging:** https://staging-alona-time-tracking.netlify.app/ (main branch)
- **Production:** https://alonastimetracking.netlify.app/ (production branch)
- **ALWAYS** test on staging before pushing to production
- **NEVER** push directly to production without staging verification
- Check Netlify build logs if deployment issues occur
- Clear browser cache and test on multiple devices before confirming deployment

## Documentation Requirements (CRITICAL)
### During Development
- **ALWAYS** update `docs/development_changelog.md` for any changes
- **TRACK** all issues, investigation notes, and modifications
- **DOCUMENT** debugging findings and solution attempts
- **FOLLOW** formatting rules from DOCUMENTATION_RULES.md
- **USE** established emoji patterns for better readability
- **ARCHIVE** old documentation according to rules

### Ready for Deployment
- **CONSOLIDATE** all development changelog items into version.json
- **UPDATE** `docs/release_notes.md` with comprehensive details
- **UPDATE** `docs/lessons_learned.md` for any bug fixes or learnings
- **CLEAR** development changelog and prepare for next cycle
- **ARCHIVE** old documentation in appropriate directories
- **VERIFY** all documentation follows established rules

## Data Integrity & Validation Rules (FROM LESSONS LEARNED)
- **ALWAYS** validate input at multiple levels: Client-side, function-level, and storage-level
- **NEVER** allow empty required fields to be saved, even in auto-save scenarios
- **VALIDATE** data existence before operations: Check if categories/activities still exist
- **IMPLEMENT** graceful degradation: Handle corrupted data without crashing the UI
- **USE** try-catch blocks for data operations with user-friendly error messages
- **PROVIDE** recovery mechanisms: Always offer a way to fix or restore corrupted data

## Auto-Save Best Practices (FROM LESSONS LEARNED)
- **DEBOUNCE** auto-save operations to prevent excessive calls during user input
- **VALIDATE** before auto-saving: Don't save invalid data automatically
- **PROVIDE** clear feedback: Show saving/saved/error states to users
- **HANDLE** auto-save failures gracefully: Reset form to last known good state
- **NEVER** clear editing state during auto-save operations
- **DISTINGUISH** between intermediate operations and final submissions

## UI Consistency Requirements (FROM LESSONS LEARNED)
- **ALWAYS** refresh displays after data changes: Don't assume users will navigate away
- **PROVIDE** immediate feedback: Users should see their changes instantly
- **HANDLE** modal cleanup properly: Clear state and refresh displays on close
- **TEST** edit flows thoroughly: Especially auto-save and validation scenarios
- **USE** established field-level save status indicators (saving/saved/error)

## Complete Publication Workflow (MANDATORY)
When user requests "publish to staging and production":
1. **Consolidate Development Changes:**
   - Review all items in `development_changelog.md`
   - Choose appropriate version increment
   - Update `version.json` with new version and all accumulated features/fixes

2. **Update Documentation:**
   - Add comprehensive entry to `release_notes.md`
   - Add entry to `lessons_learned.md` if fixing bugs or issues
   - Clear development changelog and start new cycle

3. **Deploy:**
   - Run `npm test` to verify version consistency
   - Commit changes with descriptive message: "vX.Y.Z - Brief description"
   - Push to main branch (auto-deploys to staging)
   - Test staging thoroughly
   - Push to production branch (auto-deploys to production)
   - Verify production deployment

## Pre-Deployment Testing (MANDATORY)
- **RUN** `npm test` to verify version consistency and file structure
- **TEST** in incognito/private browser to avoid cache issues
- **CHECK** console for errors before deployment
- **TEST** all major functionality before pushing
- **TEST** on mobile devices
- **CLEAR** browser cache and retest
- **FOLLOW** testing checklists from lessons learned

## Automated Testing (REQUIREMENT)
- **RUN** `npm test` before any deployment (not required for local development)
- **FIX** any failing tests before proceeding with deployment
- **UPDATE** test-runner.js if adding new critical files or patterns
- **USE** tests to catch version inconsistencies automatically

## Code Quality Standards
- Use consistent CSS variables from components.css design tokens
- Consolidate CSS - avoid duplicates
- Mobile-first responsive design (min 320px width)
- Touch targets minimum 44px for accessibility
- Test on mobile devices for all UI changes
- Maintain visual consistency between components

## UI/UX Guidelines
- Follow existing design patterns and color schemes
- Maintain consistency between home page and management interfaces
- Use proper loading states and user feedback
- Implement proper error handling with user-friendly messages
- Test click-to-edit functionality thoroughly
- Ensure proper autosave behavior

## Mobile Optimization
- Test all changes on mobile devices
- Ensure touch targets are adequate (44px minimum)
- Verify text readability and emoji sizes
- Check button spacing and layout on small screens
- Test gesture interactions and responsiveness

## Git/PowerShell Best Practices
- Use simple, single commands instead of compound commands
- Avoid interactive git commands that can hang
- Never use git reset/checkout commands that delete directories
- Use force push only in emergencies with extreme caution
- Test git commands in small steps

## Emergency Procedures
- If production breaks: **immediately test locally first**
- If console errors: **fix JavaScript before deployment attempts**
- If deployment issues: **use simple git commands only**
- Document all emergency actions taken in lessons_learned.md

## Development Cycle Checklist (FOR LOCAL DEVELOPMENT)
1. âœ… **Reviewed lessons learned for relevant patterns and best practices**
2. âœ… **Updated development_changelog.md with current issues/changes**
3. âœ… Tested locally (version numbers unchanged)
4. âœ… Console shows no errors
5. âœ… Major functionality works as expected
6. âœ… Added debugging findings to development changelog

## Pre-Deployment Checklist (FOR STAGING/PRODUCTION)
1. âœ… **Consolidated all development changelog items**
2. âœ… **Version incremented appropriately in version.json**
3. âœ… **ðŸš¨ CRITICAL: Service worker CACHE_VERSION updated to match app version**
4. âœ… **ðŸš¨ CRITICAL: Service worker console.log messages reflect new version**
5. âœ… Release notes updated in release_notes.md
6. âœ… Lessons learned updated (if applicable)
7. âœ… **README.md version number and history updated**
8. âœ… **Development changelog cleared and reset**
9. âœ… `npm test` passes (version consistency verified)
10. âœ… Tested locally in incognito browser
11. âœ… Console shows no errors
12. âœ… All major features work (Home, Reports, Management, Timer)
13. âœ… Tested category/activity editing thoroughly (if applicable)
14. âœ… Tested on mobile
15. âœ… Cross-browser testing completed
16. âœ… Staging deployment successful
17. âœ… **Cache invalidation verified - all files update together**
18. âœ… Ready for production deployment
19. âœ… **Documentation follows DOCUMENTATION_RULES.md standards**
20. âœ… **Old documentation properly archived**
21. âœ… **All documentation links verified**
22. âœ… **Emoji usage consistent across all documents**

## Publication Command Pattern
When user says "publish to staging and production":
```bash
# 1. Commit changes (with new version)
git add .
git commit -m "vX.Y.Z - Description with key fixes/features from development cycle"

# 2. Push to staging (main branch)
git push origin main

# 3. Test staging thoroughly
# Visit: https://staging-alona-time-tracking.netlify.app/

# 4. Push to production 
git push origin main:production

# 5. Verify production
# Visit: https://alonastimetracking.netlify.app/
```

## CRITICAL: Project Structure Rule (NEW)
- **ALL code, assets, and documentation must be contained within the `alona-time-tracking` directory.**
- **No files or folders should exist in the project root except for project-level config (e.g., .vscode, package.json, README.md, node_modules).**
- **If you find any code, CSS, JS, or docs outside `alona-time-tracking`, move them immediately and update all import paths.**

## Deployment History and Future Enhancements
- **Deployment History**: Must be recorded ONLY in `docs/release_notes.md`. Do NOT duplicate in `deployment.md` or other docs.
- **Future Enhancements/Backlog**: Track all future enhancements and backlog items in the backlog section of `release_notes.md` or a dedicated `BACKLOG.md` file. Do NOT leave in deployment docs.
- **Versioning**: All version references must use `version.json` as the single source of truth. 

## Design Rule: Shoelace and UI Simplicity
- Default to plain HTML/CSS/JS for all new features and UI.
- Shoelace (or any component library) may be used for non-core, non-interactive, or "nice-to-have" UI elements (e.g., toasts, alerts, modals) only after explicit discussion and agreement.
- All core, interactive, and timer-related UI should be implemented in plain HTML/CSS/JS for maximum simplicity, testability, and explicitness. 

## CRITICAL: Documentation Process Rules (NEW RULE)
- **FOLLOW DOCUMENTATION_RULES.md**: All documentation must adhere to the standards in `docs/DOCUMENTATION_RULES.md`
- **DAILY UPDATES**: Update `development_changelog.md` at least once per day during active development
- **ARCHIVING**: Archive old documentation according to the rules in `DOCUMENTATION_RULES.md`
- **VERSION TRACKING**: All documentation must reflect current version numbers
- **EMOJI USAGE**: Follow established emoji patterns for better readability
- **FORMATTING**: Use consistent markdown formatting across all documents

### Documentation Update Triggers
- **CODE CHANGES**: Update changelog immediately after any code modification
- **BUG FIXES**: Document in both changelog and lessons_learned.md
- **NEW FEATURES**: Update changelog, backlog, and release notes
- **DEPLOYMENTS**: Update release notes and archive old documentation
- **LEARNINGS**: Document immediately in lessons_learned.md

### Documentation Quality Checks
- **BEFORE COMMIT**: Verify documentation is updated and follows rules
- **BEFORE RELEASE**: Complete documentation checklist from PROJECT_DOCUMENTS.md
- **AFTER RELEASE**: Archive old documentation and verify links
- **WEEKLY**: Review all documentation for consistency and completeness 