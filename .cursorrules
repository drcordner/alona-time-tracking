# Time Tracker Development Rules

## Version Management (CRITICAL)
- **ALWAYS** update `version.json` when making ANY changes to the app
- **NEVER** update version numbers in JavaScript files - use version.json only
- Version format: "X.Y.Z - Brief Description"
- Include meaningful features list in version.json
- Update timestamp in ISO format
- Test auto-update functionality after version changes

## Data Structure Changes
- **ALWAYS** update backup/restore functionality when modifying data structures
- Check `exportData()` and `handleFileImport()` in management.js
- Test backup/restore after any data model changes
- Include new data in both export and import processes

## UI Consistency
- **ALWAYS** use consistent UI patterns across the system
- Icons vs text links should follow established patterns
- Settings should be approved before adding - don't add unnecessary toggles
- Maintain consistent button styles and interactions

## Event Handling
- **ALWAYS** test interactive elements after changes
- Verify event listeners are properly attached
- Check that onclick handlers and addEventListener work correctly
- Test edit/delete buttons in reports after any changes

## Settings Management
- **ASK** before adding new settings - avoid feature bloat
- Remove unnecessary settings that add complexity without value
- Default to the best user experience rather than adding toggles

## Autosave Consistency
- **PREFER** autosave over manual save buttons where possible
- Implement consistent autosave patterns across the system
- Remove unnecessary "Update" and "Cancel" buttons when autosave is available

## Auto-Update System
- Auto-updates are enabled in production (isDevelopment = true)
- Test version.json accessibility from app root
- Verify auto-update triggers on version.json changes
- Ensure version info displays correctly in Help and Settings

## Testing Checklist
After any changes, verify:
- [ ] `version.json` updated with new version
- [ ] Auto-update system works (change version.json and refresh)
- [ ] Version displays correctly in Help and Settings
- [ ] Backup/restore includes all data structures
- [ ] Interactive buttons work (edit, delete, custom range)
- [ ] UI consistency is maintained
- [ ] No unnecessary settings were added
- [ ] Autosave works consistently

## Code Quality
- Use semantic search and proper error handling
- Test functionality immediately after implementation
- Document any breaking changes or new patterns 